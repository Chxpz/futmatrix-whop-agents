"""
Template for defining agent-specific database tables.
Each agent gets its own schema with tables tailored to their business rules.

This file contains templates that you can customize based on your specific
business requirements for each agent.
"""

from core.database_schema import TableDefinition
from typing import List


def get_financial_advisor_tables() -> List[TableDefinition]:
    """
    Table definitions for Agent Alpha (Financial Advisor).
    
    Customize these tables based on your financial advisor business rules:
    - Client portfolios
    - Investment recommendations
    - Market analysis
    - Risk assessments
    - Compliance tracking
    """
    
    return [
        # Example table - customize as needed
        TableDefinition(
            name="client_profiles",
            schema="agent_alpha",
            columns=[
                {"name": "id", "type": "UUID PRIMARY KEY DEFAULT gen_random_uuid()"},
                {"name": "user_id", "type": "TEXT NOT NULL"},
                {"name": "risk_tolerance", "type": "TEXT CHECK (risk_tolerance IN ('conservative', 'moderate', 'aggressive'))"},
                {"name": "investment_goals", "type": "JSONB"},
                {"name": "financial_situation", "type": "JSONB"},
                {"name": "created_at", "type": "TIMESTAMPTZ DEFAULT NOW()"},
                {"name": "updated_at", "type": "TIMESTAMPTZ DEFAULT NOW()"}
            ],
            constraints=[
                "UNIQUE(user_id)"
            ],
            indexes=[
                "(user_id)",
                "(risk_tolerance)",
                "(created_at)"
            ],
            description="Client financial profiles and risk assessments"
        ),
        
        TableDefinition(
            name="investment_recommendations",
            schema="agent_alpha",
            columns=[
                {"name": "id", "type": "UUID PRIMARY KEY DEFAULT gen_random_uuid()"},
                {"name": "client_id", "type": "UUID REFERENCES agent_alpha.client_profiles(id)"},
                {"name": "recommendation_type", "type": "TEXT NOT NULL"},
                {"name": "asset_class", "type": "TEXT"},
                {"name": "symbol", "type": "TEXT"},
                {"name": "allocation_percentage", "type": "DECIMAL(5,2)"},
                {"name": "rationale", "type": "TEXT"},
                {"name": "confidence_score", "type": "DECIMAL(3,2)"},
                {"name": "created_at", "type": "TIMESTAMPTZ DEFAULT NOW()"},
                {"name": "status", "type": "TEXT DEFAULT 'pending'"}
            ],
            constraints=[],
            indexes=[
                "(client_id)",
                "(recommendation_type)",
                "(created_at)",
                "(status)"
            ],
            description="AI-generated investment recommendations for clients"
        ),
        
        TableDefinition(
            name="market_analysis",
            schema="agent_alpha",
            columns=[
                {"name": "id", "type": "UUID PRIMARY KEY DEFAULT gen_random_uuid()"},
                {"name": "analysis_date", "type": "DATE NOT NULL"},
                {"name": "market_sector", "type": "TEXT"},
                {"name": "analysis_type", "type": "TEXT"},
                {"name": "key_insights", "type": "JSONB"},
                {"name": "market_indicators", "type": "JSONB"},
                {"name": "sentiment_score", "type": "DECIMAL(3,2)"},
                {"name": "volatility_index", "type": "DECIMAL(5,2)"},
                {"name": "created_at", "type": "TIMESTAMPTZ DEFAULT NOW()"}
            ],
            constraints=[],
            indexes=[
                "(analysis_date)",
                "(market_sector)",
                "(analysis_type)",
                "(created_at)"
            ],
            description="Market analysis and insights generated by the financial advisor agent"
        )
        
        # ADD YOUR CUSTOM FINANCIAL ADVISOR TABLES HERE
        # Example ideas:
        # - portfolio_performance
        # - risk_assessments  
        # - compliance_checks
        # - client_transactions
        # - market_alerts
        # - regulatory_updates
    ]


def get_content_creator_tables() -> List[TableDefinition]:
    """
    Table definitions for Agent Beta (Content Creator).
    
    Customize these tables based on your content creator business rules:
    - Content planning
    - Brand guidelines
    - Performance analytics
    - Content calendar
    - Audience insights
    """
    
    return [
        # Example table - customize as needed
        TableDefinition(
            name="content_projects",
            schema="agent_beta",
            columns=[
                {"name": "id", "type": "UUID PRIMARY KEY DEFAULT gen_random_uuid()"},
                {"name": "user_id", "type": "TEXT NOT NULL"},
                {"name": "project_name", "type": "TEXT NOT NULL"},
                {"name": "content_type", "type": "TEXT CHECK (content_type IN ('blog', 'video', 'social', 'email', 'podcast'))"},
                {"name": "target_audience", "type": "JSONB"},
                {"name": "brand_guidelines", "type": "JSONB"},
                {"name": "status", "type": "TEXT DEFAULT 'planning'"},
                {"name": "deadline", "type": "TIMESTAMPTZ"},
                {"name": "created_at", "type": "TIMESTAMPTZ DEFAULT NOW()"},
                {"name": "updated_at", "type": "TIMESTAMPTZ DEFAULT NOW()"}
            ],
            constraints=[],
            indexes=[
                "(user_id)",
                "(content_type)",
                "(status)",
                "(deadline)",
                "(created_at)"
            ],
            description="Content creation projects and campaigns"
        ),
        
        TableDefinition(
            name="content_ideas",
            schema="agent_beta",
            columns=[
                {"name": "id", "type": "UUID PRIMARY KEY DEFAULT gen_random_uuid()"},
                {"name": "project_id", "type": "UUID REFERENCES agent_beta.content_projects(id)"},
                {"name": "title", "type": "TEXT NOT NULL"},
                {"name": "description", "type": "TEXT"},
                {"name": "content_pillars", "type": "TEXT[]"},
                {"name": "keywords", "type": "TEXT[]"},
                {"name": "target_platforms", "type": "TEXT[]"},
                {"name": "estimated_engagement", "type": "INTEGER"},
                {"name": "creativity_score", "type": "DECIMAL(3,2)"},
                {"name": "trend_relevance", "type": "DECIMAL(3,2)"},
                {"name": "status", "type": "TEXT DEFAULT 'idea'"},
                {"name": "created_at", "type": "TIMESTAMPTZ DEFAULT NOW()"}
            ],
            constraints=[],
            indexes=[
                "(project_id)",
                "(status)",
                "(creativity_score)",
                "(trend_relevance)",
                "(created_at)"
            ],
            description="AI-generated content ideas and concepts"
        ),
        
        TableDefinition(
            name="brand_voice_analysis",
            schema="agent_beta",
            columns=[
                {"name": "id", "type": "UUID PRIMARY KEY DEFAULT gen_random_uuid()"},
                {"name": "user_id", "type": "TEXT NOT NULL"},
                {"name": "brand_name", "type": "TEXT"},
                {"name": "voice_characteristics", "type": "JSONB"},
                {"name": "tone_preferences", "type": "JSONB"},
                {"name": "content_themes", "type": "TEXT[]"},
                {"name": "style_guide", "type": "JSONB"},
                {"name": "examples", "type": "JSONB"},
                {"name": "created_at", "type": "TIMESTAMPTZ DEFAULT NOW()"},
                {"name": "updated_at", "type": "TIMESTAMPTZ DEFAULT NOW()"}
            ],
            constraints=[
                "UNIQUE(user_id, brand_name)"
            ],
            indexes=[
                "(user_id)",
                "(brand_name)",
                "(created_at)"
            ],
            description="Brand voice analysis and style guidelines"
        )
        
        # ADD YOUR CUSTOM CONTENT CREATOR TABLES HERE
        # Example ideas:
        # - content_performance
        # - audience_insights
        # - content_calendar
        # - competitor_analysis
        # - trending_topics
        # - content_templates
        # - social_media_metrics
    ]


def get_general_tables() -> List[TableDefinition]:
    """
    General purpose tables that could be used by any agent type.
    These are examples you can adapt for your specific use cases.
    """
    
    return [
        TableDefinition(
            name="knowledge_base",
            schema="public",  # Shared across all agents
            columns=[
                {"name": "id", "type": "UUID PRIMARY KEY DEFAULT gen_random_uuid()"},
                {"name": "title", "type": "TEXT NOT NULL"},
                {"name": "content", "type": "TEXT NOT NULL"},
                {"name": "category", "type": "TEXT"},
                {"name": "tags", "type": "TEXT[]"},
                {"name": "agent_types", "type": "TEXT[]"},  # Which agents can use this
                {"name": "embedding", "type": "vector(1536)"},  # For semantic search
                {"name": "created_at", "type": "TIMESTAMPTZ DEFAULT NOW()"},
                {"name": "updated_at", "type": "TIMESTAMPTZ DEFAULT NOW()"}
            ],
            constraints=[],
            indexes=[
                "(category)",
                "(agent_types)",
                "(created_at)"
            ],
            description="Shared knowledge base for all agents"
        )
    ]


# INSTRUCTIONS FOR CUSTOMIZATION:
# 
# 1. Review the example tables above
# 2. Modify the table structures to match your business requirements
# 3. Add new tables specific to your agents' functions
# 4. Consider relationships between tables (foreign keys)
# 5. Think about indexing for performance
# 6. Add appropriate constraints for data integrity
# 
# When ready, you can create these tables by running:
# python create_agent_tables.py
#
# The system will automatically:
# - Create the tables in the correct agent schemas
# - Set up proper permissions
# - Add indexes for performance
# - Enable row-level security where appropriate