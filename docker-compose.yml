version: '3.8'

services:
  # PostgreSQL Database (Supabase backend)
  postgres:
    image: postgres:15-alpine
    container_name: ai_agents_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ai_agents_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - ai_agents_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_agents_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Supabase Studio (Database Management UI)
  supabase-studio:
    image: supabase/studio:20231010-ce42139
    container_name: ai_agents_supabase_studio
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      SUPABASE_URL: http://kong:8000
      SUPABASE_REST_URL: http://localhost:8000/rest/v1/
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      STUDIO_PG_META_URL: http://localhost:8080
    depends_on:
      - postgres
      - kong
    networks:
      - ai_agents_network

  # Supabase Kong (API Gateway)
  kong:
    image: kong:2.8.1
    container_name: ai_agents_kong
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    volumes:
      - ./kong.yml:/var/lib/kong/kong.yml:ro
    depends_on:
      - postgres
    networks:
      - ai_agents_network

  # PostgREST (Auto-generated REST API)
  postgrest:
    image: postgrest/postgrest:v11.2.0
    container_name: ai_agents_postgrest
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      PGRST_DB_URI: postgres://authenticator:authenticator123@postgres:5432/ai_agents_db
      PGRST_DB_SCHEMAS: public,agent_alpha,agent_beta
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      - postgres
    networks:
      - ai_agents_network
    command: ["postgrest"]

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ai_agents_rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"      # AMQP port
      - "15672:15672"    # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ai_agents_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis Session Store
  redis:
    image: redis:7-alpine
    container_name: ai_agents_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - ai_agents_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai_agents_network:
    driver: bridge